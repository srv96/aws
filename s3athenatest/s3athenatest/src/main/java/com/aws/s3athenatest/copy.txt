
import org.apache.parquet.example.data.Group;
import org.apache.parquet.example.data.simple.SimpleGroupFactory;
import org.apache.parquet.hadoop.ParquetWriter;
import org.apache.parquet.hadoop.example.GroupWriteSupport;

import java.io.*;
import java.util.List;

public class ParquetConverter {

    public InputStream convertListToParquetInputStream(List<String> stringList, String schema) throws IOException {
        Configuration conf = new Configuration();
        GroupWriteSupport.setSchema(new org.apache.avro.Schema.Parser().parse(schema), conf);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try (ParquetWriter<Group> writer = new ParquetWriter<>(
                new Path("temp.parquet"), // Temporarily write to a file (you can change the path as needed)
                new GroupWriteSupport(),
                CompressionCodecName.GZIP,
                128 * 1024,
                1 * 1024 * 1024,
                512,
                true,
                false,
                ParquetProperties.WriterVersion.PARQUET_1_0,
                conf)) {

            SimpleGroupFactory groupFactory = new SimpleGroupFactory(GroupWriteSupport.getSchema(conf));

            for (String str : stringList) {
                Group group = groupFactory.newGroup();
                group.append("data", str);
                writer.write(group);
            }
        }

        return new ByteArrayInputStream(outputStream.toByteArray());
    }

    // Example usage
    public static void main(String[] args) {
        List<String> stringList = Arrays.asList("Hello", "World");
        String schema = "message example { required binary data; }";

        try {
            ParquetConverter converter = new ParquetConverter();
            InputStream parquetInputStream = converter.convertListToParquetInputStream(stringList, schema);
            // Use the parquetInputStream as needed
            // For example, you can write it to a file or send it over a network.
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
