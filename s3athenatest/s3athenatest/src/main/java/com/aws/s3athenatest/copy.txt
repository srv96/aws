import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ FileUtility.class })
public class ConnectionTestClass {

    @Test
    public void testGetRecord() throws Exception {
        // Mock the Connection class
        Connection connection = mock(Connection.class);

        // Mock the Statement, ResultSet, and FileUtility classes
        Statement statement = mock(Statement.class);
        ResultSet resultSet = mock(ResultSet.class);
        PowerMockito.mockStatic(FileUtility.class);

        // Define the SQL query and expected result
        String sql = "SELECT * FROM table";
        List<Map<String, String>> expectedDataMap = Arrays.asList(
                Map.of("column1", "value1"),
                Map.of("column2", "value2")
        );

        // Define the mock behavior
        when(connection.createStatement()).thenReturn(statement);
        when(statement.executeQuery(sql)).thenReturn(resultSet);
        when(FileUtility.convertResultSetToList(resultSet)).thenReturn(expectedDataMap);

        // Create an instance of the class under test
        ConnectionClass connectionClass = new ConnectionClass();

        // Set the mocked connection in the class under test
        connectionClass.setConnection(connection);

        // Call the method under test
        List<Map<String, String>> result = connectionClass.getRecord(sql);

        // Verify the interactions
        verify(connection).createStatement();
        verify(statement).executeQuery(sql);
        PowerMockito.verifyStatic(FileUtility.class);
        FileUtility.convertResultSetToList(resultSet);

        // Assert the result
        assertEquals(expectedDataMap, result);
    }
}
