import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.*;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.*;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import software.amazon.awssdk.services.s3.transfer.*;
import software.amazon.awssdk.services.s3.transfer.internal.*;
import software.amazon.awssdk.services.s3.model.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ Path.class, TransferManager.class })
public class FileUploaderTest {
    
    @Test
    public void testUploadFile() throws Exception {
        // Mock the required classes
        Path pathMock = mock(Path.class);
        TransferManager transferManagerMock = mock(TransferManager.class);
        FileUpload fileUploadMock = mock(FileUpload.class);
        CompletedFileUpload completedFileUploadMock = mock(CompletedFileUpload.class);
        Response responseMock = mock(Response.class);
        
        // Mock static methods
        PowerMockito.mockStatic(Path.class);
        PowerMockito.mockStatic(TransferManager.class);
        
        // Create a test instance
        FileUploader fileUploader = new FileUploader();
        
        // Prepare test data
        String bucketName = "test-bucket";
        String key = "test-key";
        String filePath = "test-file-path";
        String eTag = "test-etag";
        
        // Mock static method calls
        when(Path.get(filePath)).thenReturn(pathMock);
        when(TransferManager.create()).thenReturn(transferManagerMock);
        
        // Mock instance method calls
        when(transferManagerMock.uploadFile(any(UploadFileRequest.class))).thenReturn(fileUploadMock);
        when(fileUploadMock.completionFuture()).thenReturn(completedFileUploadMock);
        when(completedFileUploadMock.response()).thenReturn(responseMock);
        when(responseMock.eTags()).thenReturn(eTag);
        
        // Invoke the method under test
        String result = fileUploader.uploadFile(bucketName, key, filePath);
        
        // Verify the method calls
        verify(pathMock).get(filePath);
        verify(TransferManager.create()).uploadFile(any(UploadFileRequest.class));
        verify(fileUploadMock).completionFuture();
        verify(completedFileUploadMock).response();
        verify(responseMock).eTags();
        
        // Verify the expected result
        Assert.assertEquals(eTag, result);
    }
}
