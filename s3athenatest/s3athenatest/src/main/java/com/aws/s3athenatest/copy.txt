import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ UserFunctionalEntitlementsEesServiceImpl.class, SubjectInfo.class })
public class UserFunctionalEntitlementsEesServiceImplTest {

    private UserFunctionalEntitlementsEesServiceImpl userService;
    private EESClient client;

    @Before
    public void setUp() {
        userService = new UserFunctionalEntitlementsEesServiceImpl();
        client = mock(EESClient.class);
        userService.setClient(client);
    }

    @Test
    public void testGetUserFunctionalResourceActionMap_Successful() throws Exception {
        // Arrange
        String userId = "testUserId";
        SubjectInfo subjectInfoMock = mock(SubjectInfo.class);
        ResourceAction resourceActionMock = mock(ResourceAction.class);
        Map<String, HashSet<String>> actionDataMock = new HashMap<>();
        actionDataMock.put("Role1", new HashSet<>(Arrays.asList("Function1", "Function2")));
        when(client.getSubjectInfo(eq(userId), eq(EESConstants.MODE.ALL), isNull())).thenReturn(subjectInfoMock);
        when(subjectInfoMock.getResources()).thenReturn(resourceActionMock);
        when(resourceActionMock.getResourceActionData()).thenReturn(actionDataMock);

        // Act
        Map<String, List<String>> result = userService.getUserFunctionalResourceActionMap(userId);

        // Assert
        assertEquals(1, result.size());
        assertTrue(result.containsKey("Role1"));
        assertEquals(Arrays.asList("Function1", "Function2"), result.get("Role1"));
    }

    @Test
    public void testGetUserFunctionalResourceActionMap_Exception() throws Exception {
        // Arrange
        String userId = "testUserId";
        when(client.getSubjectInfo(eq(userId), eq(EESConstants.MODE.ALL), isNull())).thenThrow(new Exception("Test Exception"));

        // Act
        Map<String, List<String>> result = userService.getUserFunctionalResourceActionMap(userId);

        // Assert
        assertTrue(result.isEmpty());
        // You may add more assertions based on your specific error handling logic
    }
}
